{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","parseLintError","e","_split","split","_split2","Object","toArray","lineStr","msg","slice","join","line","_ref","exec","slicedToArray","parseInt","parseLine","App","state","jsonStr","json","validationMsg","validationLine","editor","onChange","console","log","JSONLint","parse","_this","setState","_parseLintError","setError","err","onLoad","window","jumpTo","gotoLine","annotations","_this$state","this","push","column","row","text","type","react_default","a","createElement","className","lib_default","theme","ref","mode","value","setOptions","useWorker","editorProps","$blockScrolling","onClick","map","React","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gRCoBxC,SAASC,EAAeC,GAAG,IAAAC,GACID,EAAE,IAAIE,MAAM,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,GAClBK,EADkBH,EAAA,GAEnBI,EAFmBJ,EAAAK,MAAA,GAEPC,KAAK,MAEvB,MAAO,CAAEC,KAZX,SAAmBV,GACjB,IADoBW,EAEL,+BAA+BC,KADlCZ,EAAE,KAC6C,GAApDU,EAFaN,OAAAS,EAAA,EAAAT,CAAAO,EAAA,MAKpB,OAFAD,EAAOI,SAASJ,IAAS,GAEX,EAMDK,CAAUT,GACRC,WAuFFS,6MAjFbC,MAAQ,CACNC,QAAS,GACTC,KAAM,KACNC,cAAe,GACfC,eAAgB,KAChBC,OAAQ,QAGVC,SAAW,SAACL,GACVM,QAAQC,IAAI,UAAWP,GACvB,IACEQ,IAASC,MAAMT,GACfU,EAAKC,SAAS,CAAET,cAAe,GAAIF,YACnC,MAAMlB,GAAG,IAAA8B,EACa/B,EAAeC,GAA7BO,EADCuB,EACDvB,IAAKG,EADJoB,EACIpB,KACbkB,EAAKC,SAAS,CAAET,cAAeb,EAAKc,eAAgBX,EAAMQ,gBAI9Da,SAAW,SAACC,GACVR,QAAQC,IAAI,MAAOO,MAGrBC,OAAS,SAACX,GACRM,EAAKN,OAASA,EACdY,OAAOZ,OAASA,KAGlBa,OAAS,WACPP,EAAKN,OAAOc,SAASR,EAAKX,MAAMI,eAAiB,4EAKjD,IAAIgB,EAAc,GADXC,EAEmCC,KAAKtB,MAAvCG,EAFDkB,EAEClB,cAAeC,EAFhBiB,EAEgBjB,eAWvB,OATGD,GACDiB,EAAYG,KAAK,CACfC,OAAQ,EACRC,IAAKrB,EACLsB,KAAMvB,EACNwB,KAAM,UAKRC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,WACNC,IAAK,WACLC,KAAK,OACLf,YAAaA,EACbgB,MAAOd,KAAKtB,MAAMC,QAClBe,OAAQM,KAAKN,OACbV,SAAUgB,KAAKhB,SACf+B,WAAY,CAAEC,WAAW,GACzBC,YAAa,CAAEC,iBAAiB,KAEhCrC,EACAyB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQW,QAASnB,KAAKJ,QAAtB,WAAwCd,EAAiB,GACzDwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SACV5B,EAAclB,MAAM,MAAMyD,IAAK,SAAAhB,GAAI,OAClCE,EAAAC,EAAAC,cAAA,WAAMJ,OAKZE,EAAAC,EAAAC,cAAA,6BA3EMa,IAAMC,WChBJC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bd2ce0ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport JSONLint from 'jsonlint-webpack'\n\nimport AceEditor from \"react-ace\"\nimport \"brace\"\nimport \"brace/mode/json\"\nimport \"brace/theme/tomorrow\"\nimport \"brace/ext/language_tools\"\nimport \"brace/ext/searchbox\"\n\nfunction parseLine(e) {\n  const str = e+''\n  let [, line] = /Parse error on line ([0-9]+)/.exec(str) || []\n  line = parseInt(line) || 0\n  // Convert to ace line\n  return line - 1\n}\n\nfunction parseLintError(e) {\n  const [lineStr, ...lines] = (e+'').split('\\n')\n  const msg = lines.join('\\n')\n  const line = parseLine(lineStr)\n  return { line, msg }\n}\n\n\nclass App extends React.Component {\n\n  state = {\n    jsonStr: '',\n    json: null,\n    validationMsg: '',\n    validationLine: null,\n    editor: null,\n  }\n\n  onChange = (jsonStr) => {\n    console.log('jsonStr', jsonStr)\n    try {\n      JSONLint.parse(jsonStr)\n      this.setState({ validationMsg: '', jsonStr })\n    } catch(e) {\n      const { msg, line } = parseLintError(e)\n      this.setState({ validationMsg: msg, validationLine: line, jsonStr})\n    }\n  }\n\n  setError = (err) => {\n    console.log(\"err\", err)\n  }\n\n  onLoad = (editor) => {\n    this.editor = editor\n    window.editor = editor\n  }\n\n  jumpTo = () =>  {\n    this.editor.gotoLine(this.state.validationLine + 1)\n  }\n\n\n  render() {\n    let annotations = []\n    const { validationMsg, validationLine } = this.state\n\n    if(validationMsg) {\n      annotations.push({\n        column: 0,\n        row: validationLine,\n        text: validationMsg,\n        type: \"error\"\n      })\n    }\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Such fun!\n          </p>\n          <AceEditor\n            theme=\"tomorrow\"\n            ref={\"reactAce\"}\n            mode=\"json\"\n            annotations={annotations}\n            value={this.state.jsonStr}\n            onLoad={this.onLoad}\n            onChange={this.onChange}\n            setOptions={{ useWorker: false }}\n            editorProps={{ $blockScrolling: true }}\n          />\n          { validationMsg ? (\n            <div>\n              <button onClick={this.jumpTo}>Jump to { validationLine + 1}</button>\n              <p className=\"error\">\n                {validationMsg.split(\"\\n\").map( text => (\n                  <div>{text}</div>\n                ))}\n              </p>\n            </div>\n          ) : (\n            <h2>Valid!</h2>\n          ) }\n        </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}